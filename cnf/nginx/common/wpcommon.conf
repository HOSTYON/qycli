# Basic locations files
location = /favicon.ico {
    try_files /wp-content/uploads/fbrfg/favicon.ico $uri $uri/ /index.php?$args @empty_gif;
    access_log off;
    log_not_found off;
    expires max;
}

location @empty_gif {
    empty_gif;
}

# Cache static files
location ~* \.(ogg|ogv|svg|svgz|eot|otf|woff|woff2|ttf|m4a|mp4|ttf|rss|atom|jpe?g|gif|cur|heic|png|tiff|ico|webm|mp3|aac|tgz|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|swf|webp|json|webmanifest|cast)$ {
    add_header "Access-Control-Allow-Origin" "*";
    add_header "Cache-Control" "public, no-transform";
    access_log off;
    log_not_found off;
    expires max;
}

# Cache css & js files
location ~* \.(?:css(\.map)?|js(\.map)?)$ {
    add_header "Access-Control-Allow-Origin" "*";
    add_header "Cache-Control" "public, no-transform";
    access_log off;
    log_not_found off;
    expires 30d;
}

# Security settings for better privacy
# Deny hidden files
location ~ /\.(?!well-known\/) {
    deny all;
}

# Return 403 forbidden for readme.(txt|html) or license.(txt|html) or example.(txt|html) or other common git repository files
location ~*  "/(^$|readme|license|example|README|LEGALNOTICE|INSTALLATION|CHANGELOG)\.(txt|html|md)" {
    deny all;
}

# block base64_encoded content
location ~* "(base64_encode)(.*)(\()" {
    deny all;
}

# Rate limited and access controlled wp-login und wp-admin
location = /wp-login.php {
    limit_req zone=zoneone burst=1 nodelay;
    include fastcgi_params;
    include fastcgi_qycli_params;
    #include common/acl.conf;
    fastcgi_pass php-fpm;
}

location /wp-admin {
        location ~* /wp-admin/admin-ajax.php$ {
                limit_req zone=zonetwo burst=20 nodelay;
                try_files $uri =404;
                include fastcgi_params;
                include fastcgi_qycli_params;
                fastcgi_pass php-fpm;
        }
        location ~* /wp-admin/.*\.php$ {
                limit_req zone=zonetwo burst=10 nodelay;
                #include common/acl.conf;
                try_files $uri =404;
                include fastcgi_params;
                include fastcgi_qycli_params;
                fastcgi_pass php-fpm;
        }
}

location = ^/(wp-cron.php|xmlrpc.php|qyc-pma/) {
    limit_req zone=zonetwo burst=1 nodelay;
    include fastcgi_params;
    include fastcgi_qycli_params;
    fastcgi_pass php-fpm;
}

# Disable wp-config.txt
location = /wp-config.txt {
    deny all;
    access_log off;
    log_not_found off;
}

location = /robots.txt {
# Some WordPress plugin gererate robots.txt file
# Refer #340 issue
    try_files $uri $uri/ /index.php?$args @robots;
    access_log off;
    log_not_found off;
}

# fallback for robots.txt with default wordpress rules
location @robots {
    return 200 "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n";
}

location /wp-content/cache {
# Cache css & js files
    location ~* \.(?:css(\.map)?|js(\.map)?|.html)$ {
        add_header "Access-Control-Allow-Origin" "*";
        access_log off;
        log_not_found off;
        expires 30d;
    }
    location ~ \.php$ {
        #Prevent Direct Access Of PHP Files From Web Browsers
        deny all;
    }
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
}

# mitigate DoS attack CVE with WordPress script concatenation
# add the following line to wp-config.php
# define( 'CONCATENATE_SCRIPTS', false );
location ~ \/wp-admin\/load-(scripts|styles).php {
    deny all;
}

# Disallow php in upload folder
location /wp-content/uploads/ {
        location ~* \.php$ {
                deny all;
        }
}