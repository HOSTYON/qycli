#!/bin/bash

# Firewall for qycli

# Check if I am root
[[ $(whoami) != "root" ]] && echo "qycli has to be installed as root, try 'sudo -i' or 'su -' to become root, then try again." && exit
# Check if there is SSH
[[ ! $(systemctl status ssh) ]] && echo "No SSH service found, aborting..." && exit
# Check if there is netplan
[[ ! $(command -v netplan) || ! $(find /etc/netplan -type f -printf "%f\n" | sort -r | head -n1) ]] && echo "Netplan not found, aborting..." && exit

[[ $(command -v ufw) ]] && echo "Found UFW, purging it." && apt -y purge ufw
[[ $(command -v firewall-cmd) ]] && echo "Found firewalld, purging it." && apt -y purge firewalld
[[ ! $(command -v nft) ]] && echo "Didn't find nftables, installing it." && apt update && apt -y install nftables && systemctl enable nftables.service

# Determine SSH port of host
activesshport=$(systemctl status ssh | grep -Po "(?<=port ).*(?=\.)" | sort -u)
confsshport=$(grep -Po "(?<=^Port ).*" /etc/ssh/sshd_config)
if [[ $activesshport != "$confsshport" ]]; then
    sed -i.bk 's/#Port/Port/g' /etc/ssh/sshd_config
    sed -i "s/Port *[0-9]*/Port $activesshport/g" /etc/ssh/sshd_config
    systemctl restart sshd
    sshport="$activesshport"
else
    sshport="$activesshport"
fi

tee /etc/nftables.conf >/dev/null <<EOF
#!/usr/sbin/nft -f

flush ruleset

table inet filter {
        chain input {
                # By default, drop all traffic unless it meets a filter
                # criteria specified by the rules that follow below.
                type filter hook input priority 0; policy drop;

                # Allow traffic from established and related packets, drop invalid
                ct state vmap { established : accept, related : accept, invalid : drop } 

                # Allow loopback traffic.
                iifname lo accept

                # Allow SSH
                tcp dport { $sshport } accept
        }
        chain forward {
                type filter hook forward priority 0; policy drop;
        }
        chain output {
                type filter hook output priority 0; policy accept;
        }
}
EOF

while IFS= read -r cfip; do
    sed "/hook input/a\                ip6 saddr $cfip accept # Cloudflare IP" -i /etc/nftables.conf
done </var/qyc/cache/cloudflare_ipv6_ips_new
while IFS= read -r cfip; do
    sed "/hook input/a\                ip saddr $cfip accept # Cloudflare IP" -i /etc/nftables.conf
done </var/qyc/cache/cloudflare_ipv4_ips_new

nft -f /etc/nftables.conf
systemctl restart crowdsec-firewall-bouncer

# Use Cloudflare for time sync
sed '0,/.*NTP.*/s++NTP=time.cloudflare.com+' -i /etc/systemd/timesyncd.conf
systemctl restart systemd-timesyncd
