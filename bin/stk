#!/bin/bash

# qycli stack install functions

# shellcheck disable=SC1091
source /opt/qycli/bin/upd

stk_utility_and_repos() {
    if [[ -f /etc/needrestart/needrestart.conf ]]; then
        export NEEDRESTART_MODE=a
        sed "s+#\$nrconf{restart} = '.*';+\$nrconf{restart} = 'a';+" -i /etc/needrestart/needrestart.conf
    fi

    # CrowdSec
    curl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.deb.sh | bash

    upd_apt
    # Utilities
    apt -y install ubuntu-standard ubuntu-server snap gnupg2 ca-certificates libpwquality-tools apt-transport-https rsync #lsb-release

    # redis repo
    curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
    # old: add-apt-repository -y ppa:redislabs/redis

    # MariaDB repo
    curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash -s -- --skip-maxscale

    # For GeoIP
    add-apt-repository -y ppa:maxmind/ppa

    addgroup qycli
    adduser --disabled-password --gecos "" --ingroup qycli qycli

    # Install yq
    echo "Installing yq"
    upd_yq
}

stk_postfix_install() {
    DEBIAN_FRONTEND=noninteractive apt -y install postfix
    ## Following will store all outgoing mail in /home/qycli/mail/new
    echo "home_mailbox = mail/" >>/etc/postfix/main.cf
    echo "virtual_alias_maps = static:qycli" >>/etc/postfix/main.cf
    systemctl restart postfix
}

stk_nginx_cert() {
    openssl genpkey -algorithm Ed25519 -out /etc/ssl/qycli.key
    openssl req -new -x509 -key /etc/ssl/qycli.key -out /etc/ssl/qycli.crt -days 36500 -subj "/C=AQ/ST=qycli/L=qycli/O=HOSTYON/OU=SysOps/CN=HOSTYON"
    chown qycli:qycli -R /etc/ssl/*
}

stk_nginx_install() {
    if [[ -d /etc/nginx && -d /usr/lib/nginx/modules ]]; then
        printf "\nNGINX is already installed, start on a fresh system please.\n"
        exit
    fi

    mkdir /var/log/nginx
    touch /var/log/nginx/error.log
    chown -R qycli:qycli /var/log/nginx/

    mkdir -p /etc/nginx/sites-enabled
    mkdir /etc/nginx/sites-available

    mkdir -p /var/lib/nginx/proxy
    chown -R qycli:qycli /var/lib/nginx

    stk_nginx_cert

    upd_get_new_cf_ips

    mkdir /var/www
    chown qycli:qycli /var/www

    upd_nginx
    upd_nginx_conf

    ln -s /usr/local/qycli/nginx/sbin/nginx /usr/bin/nginx
}

stk_mariadb_admin_user() {
    admin_password=$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 32)
    runuser -u mysql -- mysql --user=mysql <<EOF
CREATE USER 'admin'@'localhost' IDENTIFIED BY '${admin_password}';
GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost';
FLUSH PRIVILEGES;
EOF
    echo "db_admin_password: $admin_password" >>/var/opt/qycli/cnf.yaml
}

stk_mariadb_install() {
    apt -y install mariadb-server
    upd_mariadb_conf
    stk_mariadb_admin_user
}

stk_php_install() {
    apt -y install imagemagick ghostscript

    mkdir /var/log/php/
    touch /var/log/php/php-fpm-error.log
    chown -R qycli:qycli /var/log/php/

    mkdir /run/qycli

    upd_php
    upd_php_conf

    for bin in /usr/local/qycli/php"$php_version_short"/bin/*; do
        ln -s "$bin" /usr/bin/"$(basename "$bin")"
    done
}

stk_redis_install() {
    apt -y install redis
    usermod -g qycli redis

    upd_redis_conf
    upd_redis_service
}

stk_wpcli_install() {
    wget -qO /usr/local/bin/wp-cli https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    chmod +x /usr/local/bin/wp-cli
    tee /usr/local/bin/wp >/dev/null <<'EOF'
runuser -u qycli -- wp-cli $@
EOF
    chmod +x /usr/local/bin/wp
    #wp package install aaemnnosttv/wp-cli-login-command
}

stk_composer_install() {
    upd_composer
}

stk_pma_install() {
    composer -d/var/www create-project phpmyadmin/phpmyadmin /var/www/pma

    mkdir /etc/pma
    cp /opt/qycli/cnf/pma/config.inc.php /etc/pma/config.inc.php

    blowfish_secret=$(tr -dc 'A-Za-z0-9!$%()*,-.:;<=>?@^_|~' </dev/urandom | head -c 32)
    sed "s+\['blowfish_secret'\] = ''+\['blowfish_secret'\] = '$blowfish_secret'+" -i /etc/pma/config.inc.php

    pmapassword=$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 24)
    runuser -u mysql -- mysql --user=mysql <<EOF
CREATE USER 'pma'@'localhost' IDENTIFIED BY '$pmapassword';
GRANT SELECT, INSERT, UPDATE, DELETE ON phpmyadmin.* TO 'pma'@'localhost';
FLUSH PRIVILEGES;
EOF
    sed "s+\['controlpass'\] = 'pmapass'+\['controlpass'\] = '$pmapassword'+" -i /etc/pma/config.inc.php
    mysql </var/www/pma/sql/create_tables.sql

    ln -s /etc/pma/config.inc.php /var/www/pma/config.inc.php
    systemctl restart php-fpm
}

stk_tinyfilemanager_install() {
    git -C /var/www clone https://github.com/prasathmani/tinyfilemanager.git
    cp /var/www/tinyfilemanager/config-sample.php /var/www/tinyfilemanager/config.php
    sed -i "/'user' =>.*/d" /var/www/tinyfilemanager/config.php
    sed -i "s+'admin' =>.*+'admin' => '',+" /var/www/tinyfilemanager/config.php
}

stk_crowdsec_install() {
    apt -y install crowdsec
    apt -y install crowdsec-firewall-bouncer-nftables
    apt -y install crowdsec-cloudflare-bouncer
}

stk_install() {
    upd_system_resources_qycli_cnf
    stk_utility_and_repos
    stk_postfix_install
    stk_nginx_install
    stk_php_install
    stk_mariadb_install
    stk_redis_install
    stk_wpcli_install
    stk_composer_install
    stk_pma_install
    stk_tinyfilemanager_install
    stk_crowdsec_install
    printf "\nqycli stack was installed.\n\n"
}
