#!/bin/bash

# function library for qyc

mk_db() {
    dbpassword=$(openssl rand -base64 12)
    #local qycpw=$(grep "MariaDB qyc" /etc/qycli/qycli.cnf | sed 's/^.*: //') # Reading the qycli.cnf file
    dbnaming="qyc_$(echo ${domain} | sed "s+[^0-9A-Za-z]+_+g")"
	runuser -u mysql -- mysql --user=mysql <<EOF
CREATE USER ${dbnaming}@localhost IDENTIFIED BY '${dbpassword}';
CREATE DATABASE ${dbnaming};
GRANT ALL PRIVILEGES ON ${dbnaming}.* TO ${dbnaming}@localhost;
FLUSH PRIVILEGES;
EOF
}

mk_site() {
    mkdir -p /var/www/$domain/htdocs
    mkdir -p /var/www/$domain/nginx-conf
    cp /etc/nginx/$template /etc/nginx/sites-available/$domain
    sed -i "s/dmn.tld/$domain/g" /etc/nginx/sites-available/$domain
    tee /var/www/$domain/nginx-conf/server-names.conf >/dev/null <<EOF
server_name
$domain
www.$domain
;
EOF
    ln -s /etc/nginx/sites-available/$domain /etc/nginx/sites-enabled/
    chown qycli:qycli -R /var/www/$domain/*
    nginx -s reload
}

mk_wp() {
    if [[ "$1" == *"."* ]]; then
        domain="$1"
        [[ "$1" == www.* ]] && domain=$(echo "$1" | cut -c 5-)
        [[ -d /var/www/$domain ]] && printf "\nWP site already exists.\n" && exit
        shift
    else
        printf "\nInvalid domain: $1"
        print_help_wp
        exit
    fi

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            u|user|admin)
                wpadmin="$2"
                shift
                ;;
            t|title)
                wptitle="$2"
                shift
                ;;
            p|password)
                wppw="$2" # Passwords with # have to be in quotes
                shift
                ;;
            e|email)
                wpemail="$2"
                shift
                ;;
            *)
                printf "\nInvalid option: $1"
                print_help_wp
                ;;
        esac
        shift
    done

    echo "Creating database..."
    mk_db

    echo "Creating folders..."
    template=wp.tld
    mk_site

    echo "Installing WordPress..."
    systemctl reload php-fpm
    wget -qrO /var/www/$domain/htdocs/latest.tar.gz https://wordpress.org/latest.tar.gz
    tar -xf /var/www/$domain/htdocs/latest.tar.gz -C /var/www/$domain/
	mv /var/www/$domain/wordpress/* /var/www/$domain/htdocs/
	rm -rf /var/www/$domain/wordpress
	rm /var/www/$domain/htdocs/latest.tar.gz

    cp /var/www/$domain/htdocs/wp-config-sample.php /var/www/$domain/wp-config.php
    chown qycli:qycli -R /var/www/$domain/*
    wp --path=/var/www/$domain/htdocs config set DB_NAME ${dbnaming}
    wp --path=/var/www/$domain/htdocs config set DB_USER ${dbnaming}
    wp --path=/var/www/$domain/htdocs config set DB_PASSWORD ${dbpassword}
    wp --path=/var/www/$domain/htdocs config set DB_HOST :/run/mysqld/mysqld.sock
    wp --path=/var/www/$domain/htdocs config shuffle-salts
    sed -i "s+$table_prefix = 'wp_';+$table_prefix = 'qyc_';+" /var/www/$domain/wp-config.php

    [[ "$wptitle" == "" ]] && wptitle=$domain
    [[ "$wpadmin" == "" ]] && wpadmin=qycli
    if [[ "$wppw" == "" ]]; then
        wppw=$(openssl rand -base64 18)
    elif [[ ! $(echo "$wppw" | pwscore) ]]; then
        echo "Strong password is being generated."
        wppw=$(openssl rand -base64 18)
    fi
    [[ "$wpemail" == "" ]] && wpemail=info@$domain
    wp --path=/var/www/$domain/htdocs core install --url=https://$domain --title=$wptitle --admin_user=$wpadmin --admin_password=$wppw --admin_email=$wpemail

    wp --path=/var/www/$domain/htdocs rewrite structure /%postname%/
    wp --path=/var/www/$domain/htdocs plugin uninstall hello akismet
    wp --path=/var/www/$domain/htdocs theme update --all
    wp --path=/var/www/$domain/htdocs plugin install --activate cloudflare
    wp --path=/var/www/$domain/htdocs config set CLOUDFLARE_HTTP2_SERVER_PUSH_ACTIVE true
    wp --path=/var/www/$domain/htdocs config set WP_MEMORY_LIMIT 128M

    wp --path=/var/www/$domain/htdocs login install --activate

    qyc set $domain cache o on

    printf "\n$domain is ready.\n\n"
    printf "    User:     $wpadmin\n"
    printf "    Email:    $wpemail\n"
    printf "    Password: $wppw\n\n"
    printf "Add this IPv6 address as an AAAA record in Cloudflare with proxy enabled (orange cloud):\n"
    printf "    $(ip -6 a | grep inet6 | awk -F '[ \t]+|/' '{print $3}' | grep -v ^::1 | grep -v ^fe80)\n\n"
    printf "Then login manually here: https://$domain/wp-login.php\n\n"
    printf "\nOr login clicking or pasting the following link\n"
    wp --path=/var/www/$domain/htdocs login create $wpadmin
}

del_site() {
    rm /etc/nginx/sites-enabled/$domain
    rm /etc/nginx/sites-available/$domain
    rm -r /var/www/$domain/*
    rmdir /var/www/$domain
    printf "Files deleted.\n"
    local dbnaming="qyc_$(echo ${domain} | sed "s+[^0-9A-Za-z]+_+g")"
    mysql <<EOF
DROP USER ${dbnaming}@localhost;    
DROP DATABASE ${dbnaming};
EOF
    systemctl reload php-fpm
    printf "Database deleted.\n"
    printf "$domain deleted.\n"
}

del_parser() {
    if [[ "$1" == *"."* ]]; then
        domain="$1"
        [[ "$1" == www.* ]] && domain=$(echo "$1" | cut -c 5-)
        [[ ! -d /var/www/$domain ]] && printf "\nSite does not exist." && print_help_del && exit
        shift
    else
        printf "\nInvalid domain: $1"
        print_help_del
        exit
    fi

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            -y|yes) 
                proceed=yes 
                shift
                ;;
        esac
    done

    if [[ "$proceed" == "yes" ]]; then
        del_site
    else
        echo -n "Do you want to delete the site $domain? [y/Y/yes]: "
        read consent
        if [[ "$consent" == "yes" || "$consent" == "y" || "$consent" == "Y" ]]; then
            del_site
        else
            printf "Not deleting site.\n"
            exit
        fi
    fi
}

set_cache_object() {
    if [[ "$1" == "on" ]]; then
        if [[ -f /var/www/$domain/htdocs/wp-content/object-cache.php ]]; then
            echo "Object cache is already enabled."
        else
            usermod -aG redis qycli
            wp --path=/var/www/$domain/htdocs plugin install --activate wp-redis
            wp --path=/var/www/$domain/htdocs config set WP_CACHE_KEY_SALT "qyc_$domain"
            if [[ ! $(grep "redis_server" /var/www/$domain/wp-config.php) ]]; then
                sed -i "/That's all, stop editing/i\$redis_server = array( 'host' => '/run/redis/redis.sock','port' => null,'database' => 0, );" /var/www/$domain/wp-config.php
            fi
            ln -s plugins/wp-redis/object-cache.php /var/www/$domain/htdocs/wp-content/object-cache.php
            wp --path=/var/www/$domain/htdocs transient delete-all
            systemctl reload php-fpm
            printf "\nObject cache enabled.\n\n"
        fi
    elif [[ "$1" == "off" ]]; then
        if [[ ! -f /var/www/$domain/htdocs/wp-content/object-cache.php ]]; then
            echo "Object cache is already disabled."
        else
            wp --path=/var/www/$domain/htdocs plugin deactivate wp-redis
            rm /var/www/$domain/htdocs/wp-content/object-cache.php
            wp --path=/var/www/$domain/htdocs transient delete-all
            systemctl reload php-fpm
            printf "\nObject cache disabled.\n\n"
        fi
    else
        print_help_set
    fi
}

set_cache_fcgi() {
    if [[ "$1" == "on" ]]; then
        if grep "#include common/php.conf" /etc/nginx/sites-available/$domain >/dev/null; then
            printf "\nFastCGI cache is already enabled.\n"
        else
            sed -i "s+    include common/php.conf;+    #include common/php.conf;+" /etc/nginx/sites-available/$domain
            sed -i "s+#include common/wpfcgi.conf;+include common/wpfcgi.conf;+" /etc/nginx/sites-available/$domain
            wp --path=/var/www/$domain/htdocs plugin install --activate nginx-helper
            wp --path=/var/www/$domain/htdocs option add rt_wp_nginx_helper_options --format=json '{"enable_purge":"1","cache_method":"enable_fastcgi","purge_method":"get_request","enable_map":null,"enable_log":null,"log_level":"INFO","log_filesize":"5","enable_stamp":null,"purge_homepage_on_edit":"1","purge_homepage_on_del":"1","purge_archive_on_edit":"1","purge_archive_on_del":"1","purge_archive_on_new_comment":null,"purge_archive_on_deleted_comment":null,"purge_page_on_mod":"1","purge_page_on_new_comment":"1","purge_page_on_deleted_comment":"1","redis_hostname":"127.0.0.1","redis_port":"6379","redis_prefix":"nginx-cache:","purge_url":"","redis_enabled_by_constant":0,"smart_http_expire_form_nonce":"19aab78f2b"}'
            nginx -s reload
            printf "\nFastCGI cache enabled.\n\n"
        fi
    elif [[ "$1" == "off" ]]; then
        if grep "#include common/wpfcgi.conf" /etc/nginx/sites-available/$domain >/dev/null; then
            printf "\nFastCGI cache is already disabled.\n"
        else
            sed -i "s+#include common/php.conf;+include common/php.conf;+" /etc/nginx/sites-available/$domain
            sed -i "s+    include common/wpfcgi.conf;+    #include common/wpfcgi.conf;+" /etc/nginx/sites-available/$domain
            wp --path=/var/www/$domain/htdocs plugin deactivate nginx-helper
            wp --path=/var/www/$domain/htdocs option delete rt_wp_nginx_helper_options
            nginx -s reload
            printf "\nFastCGI cache disabled.\n\n"
        fi
    else
        print_help_set
    fi
}

set_cache_parser() {
    if [[ "$1" == "object" || "$1" == "o" ]]; then
        shift
        set_cache_object "$@"
    elif [[ "$1" == "fcgi" || "$1" == "f" ]]; then
        shift
        set_cache_fcgi "$@"
    elif [[ "$1" == "all" || "$1" == "both" ]]; then
        shift
        set_cache_object "$@"
        set_cache_fcgi "$@"
    elif [[ "$1" == "on" || "$1" == "off" ]]; then
        set_cache_object "$@"
        set_cache_fcgi "$@"
    else
        printf "\nInvalid option: $1\n"
        print_help_set
        exit
    fi 
}

set_alias() {
    if [[ "$1" == "add" ]]; then
        shift
        if [[ "$1" == *"."* ]]; then
            aliasdomain="$1"
            [[ ! -d /var/www/$domain ]] && printf "\nSite to add an alias domain name to does not exist.\n" && print_help_set && exit
            shift
        else
            printf "\nInvalid domain: $1\n"
            print_help_set
            exit
        fi

        if grep "$aliasdomain" /var/www/$domain/nginx-conf/server-names.conf >/dev/null; then
            printf "\nAlias domain name already exists.\n\n"
        else
            sed -i "/;/i$aliasdomain" /var/www/$domain/nginx-conf/server-names.conf
            nginx -s reload
            printf "\nAlias domain name $aliasdomain successfully added to site $domain.\n\n"            
        fi
    elif [[ "$1" == "del" || "$1" == "delete" ]]; then
        shift
        if [[ "$1" == *"."* ]]; then
            aliasdomain="$1"
            [[ ! -d /var/www/$domain ]] && printf "\nSite to remove an alias domain name from does not exist.\n" && print_help_set && exit
            shift
        else
            printf "\nInvalid domain: $1\n"
            print_help_set
            exit
        fi

        if grep "$aliasdomain" /var/www/$domain/nginx-conf/server-names.conf >/dev/null; then
            sed -i "/$aliasdomain/d" /var/www/$domain/nginx-conf/server-names.conf
            nginx -s reload
            printf "\nAlias domain name $aliasdomain successfully deleted from site $domain.\n\n"            
        else
            printf "\nAlias domain name does not exists.\n\n"
        fi
    elif [[ "$1" == "ls" || "$1" == "list" ]]; then
        printf "\nAll domain names of site $domain:\n"
        cat /var/www/$domain/nginx-conf/server-names.conf | sed "s/server_name//" | sed "s/;//"
    else
        print_help_set 
    fi
}

mk() {
    if [[ "$1" == "wp" ]]; then
        shift
        mk_wp "$@"
    else
        print_help_mk
    fi
}

ls() {
    printf "\n"
    printf "All sites available:\n"
    for name in /etc/nginx/sites-available/*
    do
        printf "    $(echo ${name} | sed "s+/etc/nginx/sites-available/++" | sed "s+default++" )\n"
    done
    printf "\n"
}

dev_upd() {
    wget -qO- qyc.li/inst | bash -s dev
}

qyc_set() {
    if [[ "$1" == *"."* ]]; then
        domain="$1"
        [[ "$1" == www.* ]] && domain=$(echo "$1" | cut -c 5-)
        [[ ! -d /var/www/$domain ]] && printf "\nSite does not exist." && print_help_set && exit
        shift
    else
        printf "\nInvalid domain: $1\n"
        print_help_set
        exit
    fi

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            cache)
                shift
                set_cache_parser "$@"
                set_success=1
                ;;
            alias|name|domain)
                shift
                set_alias "$@"
                set_success=1
                ;;
        esac
        shift
    done
    if [[ "$set_success" != "1" ]]; then
        printf "\nNo valid option found for "qyc set".\n"
        print_help_set
    fi
}

clone_site() {
    domain=$cloneto
    template=wp.tld

    echo "Making new site..."
    mk_site
    echo "Copying files..."
    rsync -ar --exclude 'nginx-conf' /var/www/$clonefrom/ /var/www/$cloneto/

    echo "Copying the database..."
    local dbfrom="qyc_$(echo ${clonefrom} | sed "s+[^0-9A-Za-z]+_+g")"
    mysqldump $dbfrom | tee /var/www/$clonefrom/db.sql >/dev/null
    cp /var/www/$clonefrom/db.sql /var/www/$cloneto/db.sql
    sed -i "s+${clonefrom}+${cloneto}+g" /var/www/$cloneto/db.sql
    mk_db
    mysql $dbnaming < /var/www/$cloneto/db.sql
    echo "Updating the WP config..."
    wp --path=/var/www/$cloneto/htdocs config set DB_NAME ${dbnaming}
    wp --path=/var/www/$cloneto/htdocs config set DB_USER ${dbnaming}
    wp --path=/var/www/$cloneto/htdocs config set DB_PASSWORD ${dbpassword}
    wp --path=/var/www/$cloneto/htdocs config set WP_CACHE_KEY_SALT "qyc_$cloneto"

    printf "\nCloning of $clonefrom to $cloneto is done.\n\n"
    printf "Add this IPv6 address as an AAAA record for $cloneto in Cloudflare with proxy enabled (orange cloud):\n"
    printf "    $(ip -6 a | grep inet6 | awk -F '[ \t]+|/' '{print $3}' | grep -v ^::1 | grep -v ^fe80)\n\n"
    printf "Then login here with the same login details as the original site: https://$cloneto/wp-login.php\n\n"
}

qyc_clone() {
   if [[ "$1" == *"."* ]]; then
        clonefrom="$1"
        [[ "$1" == www.* ]] && clonefrom=$(echo "$1" | cut -c 5-)
        [[ ! -d /var/www/$clonefrom ]] && printf "\nSite does not exist." && print_help_clone && exit
        shift
    else
        printf "\nInvalid domain: $1\n"
        print_help_clone
        exit
    fi

    if [[ "$1" == "to" ]]; then
        shift
    fi
    
    if [[ "$1" == *"."* ]]; then
        cloneto="$1"
        [[ "$1" == www.* ]] && cloneto=$(echo "$1" | cut -c 5-)
    fi

    if [[ -d /var/www/$cloneto ]]; then
        echo -n "Do you want to overwrite $cloneto from $clonefrom? [y/Y/yes]: "
        read consent
        if [[ "$consent" == "yes" || "$consent" == "y" || "$consent" == "Y" ]]; then
            qyc del $cloneto -y
            clone_site
        else
            printf "Not cloning site.\n"
            exit
        fi
    else
        clone_site
    fi
}

del() {
    if [[ "$1" == "" ]]; then
        print_help_del
    else
        del_parser "$@"
    fi
}

