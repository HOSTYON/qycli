#!/bin/bash

# shellcheck disable=1091
source /opt/qycli/bin/upd

# function library for qyc

get_public_ips() {
    ipv4_dev=$(ip r | awk '/default via/ {print $5}' | head -n1)
    ipv4=$(ip -4 a show dev "$ipv4_dev" scope global | grep inet | awk -F '[ \t]+|/' '{print $3}' | grep -Ev "10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" |
        grep -Ev "172\.([1][6-9]|[2][0-9]|3[0-1]{1,3})\.[0-9]{1,3}\.[0-9]{1,3}" | grep -Ev "192\.168\.[0-9]{1,3}\.[0-9]{1,3}")
    ipv6_dev=$(ip -6 r | awk '/default via/ {print $5}' | head -n1)
    ipv6=$(ip -6 a show dev "$ipv6_dev" scope global | grep inet6 | awk -F '[ \t]+|/' '{print $3}' | grep -v ^::1 | grep -v ^fe80 | grep -v ^fd00)
}

domain_parser() {
    if [[ "$1" == *"."* ]]; then
        domain="$1"
        [[ "$1" == www.* ]] && domain=$(echo "$1" | cut -c 5-)
        root_domain=$domain
        domain_dot_count=$(echo "$domain" | grep -o "\." | grep -c "\.")
        if [[ $domain_dot_count -gt 2 ]]; then
            echo "Subdomains deeper than one level are not supported with Cloudflare SSL. Use bla-sub.domain.com instead of bla.sub.domain.com. Aborting..." && exit
        elif [[ $domain_dot_count == 2 ]]; then
            subdomain=true
            # shellcheck disable=2001
            root_domain=$(echo "$domain" | sed "s+^[^\.]*\.++")
        fi
    else
        echo "Invalid domain: $1"
        exit
    fi
}

mk_db() {
    dbpassword=$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 24)
    #local qycpw=$(grep "MariaDB qyc" /etc/qycli/qycli.cnf | sed 's/^.*: //') # Reading the qycli.cnf file
    snakedomain=${domain//[^0-9A-Za-z]/_}
    dbnaming="qyc_$snakedomain"

    runuser -u mysql -- mysql --user=mysql <<EOF
CREATE USER ${dbnaming}@localhost IDENTIFIED BY '${dbpassword}';
CREATE DATABASE ${dbnaming};
GRANT ALL PRIVILEGES ON ${dbnaming}.* TO ${dbnaming}@localhost;
FLUSH PRIVILEGES;
EOF
}

mk_site_create_cf_api_token_crowdsec_and_dns() {
    root_domain_zone_id=$(yq '.[].[] | select(.name == "'"$root_domain"'").id' /var/opt/qycli/cfzones.json)
    if [[ $root_domain_zone_id != "" ]]; then
        if [[ ! -d /var/opt/qycli/"$root_domain" ]]; then
            root_domain_account_id=$(yq '.[].[] | select(.name == "'"$root_domain"'").account.id' /var/opt/qycli/cfzones.json)
            # Create CrowdSec and DNS Token
            curl -X POST "https://api.cloudflare.com/client/v4/user/tokens" \
                -H "Authorization: Bearer $cf_token" \
                -H "Content-Type: application/json" \
                --data '{"name":"'"$root_domain"' qycli CrowdSec + DNS","policies":[{"effect":"allow","resources":{"com.cloudflare.api.account.'"$root_domain_account_id"'":"*"},"permission_groups":[{"id":"2edbf20661fd4661b0fe10e9e12f485c","name":"Account Rule Lists Write"},{"id":"a416acf9ef5a4af19fb11ed3b96b1fe6","name":"Account Firewall Access Rules Write"}]},{"effect":"allow","resources":{"com.cloudflare.api.account.zone.'"$root_domain_zone_id"'":"*"},"permission_groups":[{"id":"3030687196b94b638145a3953da2b699","name":"Zone Settings Write"},{"id":"c8fed203ed3043cba015a93ad1616f1f","name":"Zone Read"},{"id": "4755a26eedb94da69e1066d98aa820be","name":"DNS Write"}]}]}' >/var/opt/qycli/"$root_domain"/cf_token_crowdsec_and_dns.json
        fi
    else
        echo "Root domain $root_domain cannot be found in /var/opt/qycli/cfzones.json,"
        echo "because the file either doesn't exist or the Cloudflare API token is not linked to"
        echo "the Account with the right Zone/Domain."
    fi
}

cnf_crowdsec_cloudflare_bouncer() {
    cf_crowdsec_tokens=$(for json in /var/opt/qycli/*/cf_token_crowdsec_and_dns.json; do; cf_cs_token=$(yq .result.value "$json"); printf "$cf_cs_token,"; done)

    crowdsec-cloudflare-bouncer -d
    crowdsec-cloudflare-bouncer -g "$cf_crowdsec_tokens" -o /etc/crowdsec/bouncers/crowdsec-cloudflare-bouncer.yaml
    crowdsec-cloudflare-bouncer -s
    systemctl restart crowdsec-cloudflare-bouncer
}

mk_site() {
    mkdir -p /var/www/"$domain"/htdocs
    mkdir -p /var/www/"$domain"/nginx-conf
    mkdir /var/opt/qycli/"$root_domain"
    cp /etc/nginx/"$template" /etc/nginx/sites-available/"$domain"
    sed -i "s/dmn.tld/$domain/g" /etc/nginx/sites-available/"$domain"
    if [[ $subdomain == true ]]; then
        domainlist=$domain
    else
        # shellcheck disable=2116
        domainlist=$(echo "$domain
www.$domain")
    fi
    tee /var/www/"$domain"/nginx-conf/server-names.conf >/dev/null <<EOF
server_name
$domainlist
;
EOF

    ln -s /etc/nginx/sites-available/"$domain" /etc/nginx/sites-enabled/
    chown qycli:qycli -R /var/www/"$domain"/*
    nginx -s reload

    cf_token=$(yq .cloudflare_token /var/opt/qycli/cnf.yaml)
    if [[ $cf_token != "" ]]; then
        mk_site_create_cf_api_token_crowdsec_and_dns
    fi
}

del_dns_entries() {
    # List DNS records for a Zone
    existing_dns_records=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/dns_records?name=$domain&type=A,AAAA" \
        -H "Authorization: Bearer $cf_token" \
        -H "Content-Type: application/json" |
        yq '.result[].id')

    # Delete DNS records for a Zone if they exist
    if [[ $existing_dns_records != "" ]]; then
        for id in $existing_dns_records; do
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/dns_records/$id" \
                -H "Authorization: Bearer $cf_token" \
                -H "Content-Type: application/json" 1>/dev/null
        done
        dns_entries_deleted=true
    fi
}

cf_dns_entry() {
    del_dns_entries

    # Create new DNS record in zone
    curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/dns_records" \
        -H "Authorization: Bearer $cf_token" \
        -H "Content-Type: application/json" \
        --data '{"type":"'"$dns_type"'","name":"'"$domain"'","content":"'"$dns_value"'","ttl":1,"proxied":true}' \
        >"$domain"_cf_dns.json

    # Change zone settings
    curl -s -X PATCH "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/settings" \
        -H "Authorization: Bearer $cf_token" \
        -H "Content-Type: application/json" \
        --data '{"items":[{"id":"ssl","value":"full"},{"id":"0rtt","value":"on"},{"id":"minify","value":{"css":"on","html":"on","js":"on"}},{"id":"rocket_loader","value":"on"}]}' 1>/dev/null
    curl -s -X PATCH "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/argo/tiered_caching" \
        -H "Authorization: Bearer $cf_token" \
        -H "Content-Type: application/json" \
        --data '{"value":"on"}' 1>/dev/null
}

mk_wp_print_login_info() {
    cat <<EOF

$domain is ready.

EOF
    tee /var/opt/qycli/"$root_domain"/login.yaml <<EOF
    User:     $wpadmin
    Email:    $wpemail
    Password: $wppw

EOF
}

mk_wp_print_login_info_auto() {
    cat <<EOF
The DNS entry has been made at Cloudflare automatically.
You can login here: https://$domain/wp-login.php

EOF
}

mk_wp_print_login_info_manual_v6() {
    cat <<EOF
Add this IPv6 address manually as an AAAA record in Cloudflare with proxy enabled (orange cloud):
$ipv6

Then login here: https://$domain/wp-login.php

EOF
}

mk_wp_print_login_info_manual_v4() {
    cat <<EOF
Add this IPv4 address manually as an A record in Cloudflare with proxy enabled (orange cloud):
$ipv4

Then login here: https://$domain/wp-login.php

EOF
}

mk_wp_create_cf_api_token_wp_cf_page_cache() {
    if [[ $root_domain_zone_id != "" ]]; then
        if [[ ! -f /var/opt/qycli/$root_domain/cf_token_wp_cf_page_cache.json ]]; then
            root_domain_account_id=$(yq '.[].[] | select(.name == "'"$root_domain"'").account.id' /var/opt/qycli/cfzones.json)
            # Create WP Cloudflare Super Page Cache Token
            curl -X POST "https://api.cloudflare.com/client/v4/user/tokens" \
                -H "Authorization: Bearer $cf_token" \
                -H "Content-Type: application/json" \
                --data '{"name":"'"$root_domain"' qycli WP Cloudflare Super Page Cache","policies":[{"effect":"allow","resources":{"com.cloudflare.api.account.'"$root_domain_account_id"'":"*"},"permission_groups":[{"id":"c1fde68c7bcc44588cbb6ddbc16d6480","name":"Account Settings Read"},{"id":"e086da7e2179491d91ee5f35b3ca210a","name":"Workers Scripts Write"}]},{"effect":"allow","resources":{"com.cloudflare.api.account.zone.'"$root_domain_zone_id"'":"*"},"permission_groups":[{"id":"3030687196b94b638145a3953da2b699","name":"Zone Settings Write"},{"id":"e17beae8b8cb423a99b1730f21238bed","name":"Cache Purge"},{"id":"ed07f6c337da4195b4e72a1fb2c6bcae","name":"Page Rules Write"},{"id":"e6d2666161e84845a636613608cee8d5","name":"Zone Write"},{"id":"28f4b596e7d643029c524985477ae49a","name":"Workers Routes Write"}]}]}' >/var/opt/qycli/"$root_domain"/cf_token_wp_cf_page_cache.json
        fi
    else
        echo "Root domain $root_domain cannot be found in /var/opt/qycli/cfzones.json,"
        echo "because the file either doesn't exist or the Cloudflare API token is not linked to"
        echo "the Account with the right Zone/Domain."
    fi
}

mk_wp() {
    domain_parser "$@"

    [[ -d /var/www/$domain ]] && printf "\nWP site already exists.\n" && exit

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        u | user | admin)
            wpadmin="$2"
            shift
            ;;
        t | title)
            wptitle="$2"
            shift
            ;;
        p | password)
            wppw="$2" # Passwords with # have to be in quotes
            shift
            ;;
        e | email)
            wpemail="$2"
            shift
            ;;
        *)
            echo "Invalid option: $1"
            print_help_wp
            ;;
        esac
        shift
    done

    echo "Creating database..."
    mk_db

    echo "Creating folders..."
    template=wp.tld
    mk_site

    echo "Linking PMA..."
    ln -s /var/www/pma /var/www/"$domain"/htdocs/qyc-pma

    echo "Linking Tiny File Manager..."
    mkdir /var/www/"$domain"/htdocs/qyc-files
    ln -s /var/www/tinyfilemanager/tinyfilemanager.php /var/www/"$domain"/htdocs/qyc-files/index.php
    # shellcheck disable=2027,2086
    hashed_pw=$(php -r "\$pw=password_hash(\""$dbpassword"\", PASSWORD_DEFAULT); echo(\$pw);")
    sed -i "/'admin' => .*/a '$dbnaming' => '$hashed_pw'," /var/www/tinyfilemanager/config.php
    chown -R qycli:qycli /var/www/"$domain"/htdocs/qyc-files

    echo "Installing WordPress..."
    systemctl reload php-fpm
    wget -qrO /var/www/"$domain"/htdocs/latest.tar.gz https://wordpress.org/latest.tar.gz
    tar -xf /var/www/"$domain"/htdocs/latest.tar.gz -C /var/www/"$domain"/
    mv /var/www/"$domain"/wordpress/* /var/www/"$domain"/htdocs/
    rm -rf /var/www/"$domain"/wordpress
    rm /var/www/"$domain"/htdocs/latest.tar.gz

    mkdir /var/www/"$domain"/htdocs/wp-content/mu-plugins
    ln -s /opt/qycli-plugin/qycli.php /var/www/"$domain"/htdocs/wp-content/mu-plugins/qycli.php
    #ln -s /opt/qycli-plugin/qycli-plugin /var/www/"$domain"/htdocs/wp-content/mu-plugins/qycli-plugin

    cp /var/www/"$domain"/htdocs/wp-config-sample.php /var/www/"$domain"/wp-config.php
    chown qycli:qycli -R /var/www/"$domain"/*
    wp --path=/var/www/"$domain"/htdocs config set DB_NAME "${dbnaming}"
    wp --path=/var/www/"$domain"/htdocs config set DB_USER "${dbnaming}"
    wp --path=/var/www/"$domain"/htdocs config set DB_PASSWORD "${dbpassword}"
    wp --path=/var/www/"$domain"/htdocs config set DB_HOST :/run/mysqld/mysqld.sock
    wp --path=/var/www/"$domain"/htdocs config shuffle-salts
    # shellcheck disable=2016
    sed -i 's+\$table_prefix = '\''wp_'\'';+\$table_prefix = '\''qyc_'\'';+' /var/www/"$domain"/wp-config.php

    [[ "$wptitle" == "" ]] && wptitle=$domain
    [[ "$wpadmin" == "" ]] && wpadmin=qycli
    if [[ "$wppw" == "" ]]; then
        wppw=$(openssl rand -base64 18)
    elif [[ ! $(echo "$wppw" | pwscore) ]]; then
        echo "Strong password is being generated."
        wppw=$(openssl rand -base64 18)
    fi
    [[ "$wpemail" == "" ]] && wpemail=info@$domain
    wp --path=/var/www/"$domain"/htdocs core install --url=https://"$domain" --title="$wptitle" --admin_user=$wpadmin --admin_password="$wppw" --admin_email="$wpemail"

    wp --path=/var/www/"$domain"/htdocs rewrite structure /%postname%/
    wp --path=/var/www/"$domain"/htdocs plugin uninstall hello akismet

    for theme in $(wp --path=/var/www/"$domain"/htdocs theme list --status=inactive --format=csv | grep inactive | sed s/,.*//); do
        wp --path=/var/www/"$domain"/htdocs theme delete "$theme"
    done
    wp --path=/var/www/"$domain"/htdocs theme update --all

    #wp --path=/var/www/$domain/htdocs plugin install --activate cloudflare
    #wp --path=/var/www/$domain/htdocs config set CLOUDFLARE_HTTP2_SERVER_PUSH_ACTIVE true

    wp --path=/var/www/"$domain"/htdocs config set WP_AUTO_UPDATE_CORE true
    wp --path=/var/www/"$domain"/htdocs plugin auto-updates enable --all
    wp --path=/var/www/"$domain"/htdocs theme auto-updates enable --all

    wp --path=/var/www/"$domain"/htdocs config set WP_MEMORY_LIMIT 128M

    #wp --path=/var/www/"$domain"/htdocs login install --activate

    qyc set "$domain" cache o on

    # WP Cloudflare Super Page Cache Setup
    wp --path=/var/www/"$domain"/htdocs plugin install --activate wp-cloudflare-page-cache
    sed -i '/include common\/wpcommon.conf;/a include /var/www/'"$domain"'/htdocs/wp-content/wp-cloudflare-super-page-cache/'"$domain"'/nginx.conf;' /etc/nginx/sites-available/"$domain"
    nginx -s reload

    cf_token=$(yq .cloudflare_token /var/opt/qycli/cnf.yaml)
    if [[ $cf_token != "" ]]; then
        mk_wp_create_cf_api_token_wp_cf_page_cache
    fi

    if [[ $root_domain_zone_id != "" ]]; then
        cf_token_wp_cf_page_cache=$(yq .result.value /var/opt/qycli/"$root_domain"/cf_token_wp_cf_page_cache.json)
        wp --path=/var/www/"$domain"/htdocs option patch update swcfpc_config cf_apitoken "$cf_token_wp_cf_page_cache"
        wp --path=/var/www/"$domain"/htdocs option patch update swcfpc_config cf_zoneid "$root_domain_zone_id"
        wp --path=/var/www/"$domain"/htdocs option patch update swcfpc_config cf_zoneid_list '{"'"$root_domain"'":"'"$root_domain_zone_id"'"}' --format=json
        wp --path=/var/www/"$domain"/htdocs option patch update swcfpc_config cf_auth_mode 1
    else
        echo "You are going to need to set up Cloudflare Super Page Cache manually."
    fi

    get_public_ips

    if [[ $ipv6 != "" ]]; then
        if [[ $cf_token != "" ]]; then
            dns_value=$ipv6
            dns_type=AAAA
            cf_dns_entry
            mk_wp_print_login_info
            mk_wp_print_login_info_auto
        else
            mk_wp_print_login_info_manual_v6
        fi
    elif [[ $ipv4 != "" ]]; then
        if [[ $cf_token != "" ]]; then
            dns_value=$ipv4
            dns_type=A
            cf_dns_entry
            mk_wp_print_login_info
            mk_wp_print_login_info_auto
        else
            mk_wp_print_login_info_manual_v4
        fi
    else
        echo "No ip address found. That is problematic, as your website will not be accessible."
    fi

    #Or login clicking or pasting the following link (Does'nt work yet)
    #wp --path=/var/www/"$domain"/htdocs login create $wpadmin
}

del_site() {
    del_dns_entries
    if [[ $dns_entries_deleted == "true" ]]; then
        echo "DNS entries removed"
    else
        echo "DNS entries could not automatically be removed"
    fi

    rm /etc/nginx/sites-enabled/"$domain"
    rm /etc/nginx/sites-available/"$domain"
    rm -r /var/www/"$domain"/*
    rmdir /var/www/"$domain"
    rm -r /var/opt/qycli/"$root_domain"/
    printf "Files deleted.\n"

    local snakedomain=${domain//[^0-9A-Za-z]/_}
    local dbnaming="qyc_$snakedomain"
    mysql <<EOF
DROP USER ${dbnaming}@localhost;    
DROP DATABASE ${dbnaming};
EOF
    systemctl reload php-fpm
    echo "Database deleted."
    echo "$domain deleted."
}

del_parser() {
    domain_parser "$@"
    cf_check_zones_file

    [[ ! -d /var/www/$domain ]] && printf "\nSite does not exist." && print_help_del && exit

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        -y | yes)
            proceed=yes
            shift
            ;;
        esac
    done

    if [[ "$proceed" == "yes" ]]; then
        del_site
    else
        echo -n "Do you want to delete the site $domain? [y/Y/yes]: "
        read -r consent
        if [[ "$consent" == "yes" || "$consent" == "y" || "$consent" == "Y" ]]; then
            del_site
        else
            printf "Not deleting site.\n"
            exit
        fi
    fi
}

set_cache_object() {
    if [[ "$1" == "on" ]]; then
        if [[ -f /var/www/$domain/htdocs/wp-content/object-cache.php ]]; then
            echo "Object cache is already enabled."
        else
            usermod -aG redis qycli
            wp --path=/var/www/"$domain"/htdocs plugin install --activate wp-redis
            wp --path=/var/www/"$domain"/htdocs config set WP_CACHE_KEY_SALT "qyc_$domain"
            if ! grep -q "redis_server" /var/www/"$domain"/wp-config.php; then
                sed -i "/That's all, stop editing/i\$redis_server = array( 'host' => '/run/redis/redis.sock','port' => null,'database' => 1, );" /var/www/"$domain"/wp-config.php
            fi
            ln -s plugins/wp-redis/object-cache.php /var/www/"$domain"/htdocs/wp-content/object-cache.php
            wp --path=/var/www/"$domain"/htdocs transient delete-all
            systemctl reload php-fpm
            printf "\nObject cache enabled.\n\n"
        fi
    elif [[ "$1" == "off" ]]; then
        if [[ ! -f /var/www/$domain/htdocs/wp-content/object-cache.php ]]; then
            echo "Object cache is already disabled."
        else
            wp --path=/var/www/"$domain"/htdocs plugin deactivate wp-redis
            rm /var/www/"$domain"/htdocs/wp-content/object-cache.php
            wp --path=/var/www/"$domain"/htdocs transient delete-all
            systemctl reload php-fpm
            printf "\nObject cache disabled.\n\n"
        fi
    else
        print_help_set
    fi
}

set_cache_fcgi_nginx_helper_activate() {
    wp --path=/var/www/"$domain"/htdocs plugin install --activate nginx-helper
    wp --path=/var/www/"$domain"/htdocs option add rt_wp_nginx_helper_options --format=json '{"enable_purge":"1","cache_method":"enable_fastcgi","purge_method":"get_request","enable_map":null,"enable_log":null,"log_level":"INFO","log_filesize":"5","enable_stamp":null,"purge_homepage_on_edit":"1","purge_homepage_on_del":"1","purge_archive_on_edit":"1","purge_archive_on_del":"1","purge_archive_on_new_comment":null,"purge_archive_on_deleted_comment":null,"purge_page_on_mod":"1","purge_page_on_new_comment":"1","purge_page_on_deleted_comment":"1","redis_hostname":"127.0.0.1","redis_port":"6379","redis_prefix":"nginx-cache:","purge_url":"","redis_enabled_by_constant":0,"smart_http_expire_form_nonce":"19aab78f2b"}'
}

set_cache_fcgi_nginx_helper_deactivate() {
    wp --path=/var/www/"$domain"/htdocs plugin deactivate nginx-helper
    wp --path=/var/www/"$domain"/htdocs option delete rt_wp_nginx_helper_options
}

set_cache_fcgi() {
    if [[ "$1" == "on" ]]; then
        if grep "#include common/php.conf" /etc/nginx/sites-available/"$domain" >/dev/null; then
            printf "\nFastCGI cache is already enabled.\n"
        else
            sed -i "s+    include common/php.conf;+    #include common/php.conf;+" /etc/nginx/sites-available/"$domain"
            sed -i "s+#include common/wpfcgi.conf;+include common/wpfcgi.conf;+" /etc/nginx/sites-available/"$domain"

            nginx -s reload
            printf "\nFastCGI microcache enabled.\n\n"
        fi
    elif [[ "$1" == "off" ]]; then
        if grep "#include common/wpfcgi.conf" /etc/nginx/sites-available/"$domain" >/dev/null; then
            printf "\nFastCGI cache is already disabled.\n"
        else
            sed -i "s+#include common/php.conf;+include common/php.conf;+" /etc/nginx/sites-available/"$domain"
            sed -i "s+    include common/wpfcgi.conf;+    #include common/wpfcgi.conf;+" /etc/nginx/sites-available/"$domain"

            nginx -s reload
            printf "\nFastCGI microcache disabled.\n\n"
        fi
    else
        print_help_set
    fi
}

set_cache_cloudflare() {
    if [[ "$1" == "on" ]]; then
        wp --path=/var/www/"$domain"/htdocs cfcache enable_cf_cache
    fi
    if [[ "$1" == "off" ]]; then
        wp --path=/var/www/"$domain"/htdocs cfcache disable_cf_cache
    fi
}

set_cache_parser() {
    if [[ "$1" == "object" || "$1" == "o" ]]; then
        shift
        set_cache_object "$@"
    elif [[ "$1" == "cf" || "$1" == "cloudflare" ]]; then
        shift
        set_cache_cloudflare "$@"
    elif [[ "$1" == "fcgi" || "$1" == "f" ]]; then
        shift
        set_cache_fcgi "$@"
    elif [[ "$1" == "all" || "$1" == "both" ]]; then
        shift
        set_cache_object "$@"
        set_cache_fcgi "$@"
    elif [[ "$1" == "on" || "$1" == "off" ]]; then
        set_cache_object "$@"
        set_cache_fcgi "$@"
    else
        echo "Invalid option: $1"
        print_help_set
        exit
    fi
}

set_alias() {
    if [[ "$1" == "add" ]]; then
        shift
        if [[ "$1" == *"."* ]]; then
            aliasdomain="$1"
            [[ ! -d /var/www/$domain ]] && printf "\nSite to add an alias domain name to does not exist.\n" && print_help_set && exit
            shift
        else
            echo "Invalid domain: $1"
            print_help_set
            exit
        fi

        if grep "$aliasdomain" /var/www/"$domain"/nginx-conf/server-names.conf >/dev/null; then
            printf "\nAlias domain name already exists.\n\n"
        else
            sed -i "/;/i$aliasdomain" /var/www/"$domain"/nginx-conf/server-names.conf
            nginx -s reload
            echo "Alias domain name $aliasdomain successfully added to site $domain." && printf "\n"
        fi
    elif [[ "$1" == "del" || "$1" == "delete" ]]; then
        shift
        if [[ "$1" == *"."* ]]; then
            aliasdomain="$1"
            [[ ! -d /var/www/$domain ]] && printf "\nSite to remove an alias domain name from does not exist.\n" && print_help_set && exit
            shift
        else
            echo "Invalid domain: $1"
            print_help_set
            exit
        fi

        if grep "$aliasdomain" /var/www/"$domain"/nginx-conf/server-names.conf >/dev/null; then
            sed -i "/$aliasdomain/d" /var/www/"$domain"/nginx-conf/server-names.conf
            nginx -s reload
            echo "Alias domain name $aliasdomain successfully deleted from site $domain." && printf "\n"
        else
            printf "\nAlias domain name does not exists.\n\n"
        fi
    elif [[ "$1" == "ls" || "$1" == "list" ]]; then
        echo "All domain names of site $domain:"
        sed "s/server_name//" -i /var/www/"$domain"/nginx-conf/server-names.conf | sed "s/;//"
    else
        print_help_set
    fi
}

fn_mk() {
    if [[ "$1" == "wp" ]]; then
        shift
        mk_wp "$@"
    else
        print_help_mk
    fi
}

fn_ls() {
    printf "\nAll sites available:\n"
    dir -1 /etc/nginx/sites-available/
    printf "\nAll sites enabled:\n"
    dir -1 /etc/nginx/sites-enabled/
    printf "\n"
}

set_firewall() {
    if [[ "$1" =~ (on|enabled) ]]; then
        if ! grep "#include common/7g.conf;" /etc/nginx/sites-available/"$domain" >/dev/null; then
            printf "\n7g Firewall is already enabled.\n"
        else
            sed -i "s+#include common/7g.conf;+include common/7g.conf;+" /etc/nginx/sites-available/"$domain"
            nginx -s reload
            printf "\n7g Firewall enabled.\n\n"
        fi
    elif [[ "$1" =~ (off|disabled) ]]; then
        if grep "#include common/7g.conf;" /etc/nginx/sites-available/"$domain" >/dev/null; then
            printf "\n7g Firewall is already disabled.\n"
        else
            sed -i "s+include common/7g.conf;+#include common/7g.conf;+" /etc/nginx/sites-available/"$domain"
            nginx -s reload
            printf "\n7g Firewall disabled.\n\n"
        fi
    else
        print_help_set
    fi
}

fn_set() {
    if [[ "$1" == *"."* ]]; then
        domain="$1"
        [[ "$1" == www.* ]] && domain=$(echo "$1" | cut -c 5-)
        [[ ! -d /var/www/$domain ]] && printf "\nSite does not exist." && print_help_set && exit
        shift
    else
        echo "Invalid domain: $1"
        print_help_set
        exit
    fi

    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        cache)
            shift
            set_cache_parser "$@"
            set_success=1
            ;;
        alias | name | domain)
            shift
            set_alias "$@"
            set_success=1
            ;;
        firewall | waf)
            shift
            set_firewall "$@"
            set_success=1
            ;;
        esac
        shift
    done
    if [[ "$set_success" != "1" ]]; then
        printf "\nNo valid option found for 'qyc set'.\n"
        print_help_set
    fi
}

clone_site() {
    domain=$cloneto
    template=wp.tld

    echo "Making new site..."
    mk_site
    echo "Copying files..."
    rsync -ar --exclude 'nginx-conf' /var/www/"$clonefrom"/ /var/www/"$cloneto"/

    echo "Copying the database..."

    local snakedomain=${clonefrom//[^0-9A-Za-z]/_}
    local dbfrom="qyc_$snakedomain"
    mysqldump "$dbfrom" | tee /var/www/"$clonefrom"/db.sql >/dev/null
    cp /var/www/"$clonefrom"/db.sql /var/www/"$cloneto"/db.sql
    sed -i "s+${clonefrom}+${cloneto}+g" /var/www/"$cloneto"/db.sql
    mk_db
    mysql "$dbnaming" </var/www/"$cloneto"/db.sql
    echo "Updating the WP config..."
    wp --path=/var/www/"$cloneto"/htdocs config set DB_NAME "${dbnaming}"
    wp --path=/var/www/"$cloneto"/htdocs config set DB_USER "${dbnaming}"
    wp --path=/var/www/"$cloneto"/htdocs config set DB_PASSWORD "${dbpassword}"
    wp --path=/var/www/"$cloneto"/htdocs config set WP_CACHE_KEY_SALT "qyc_$cloneto"

    ipv6=$(ip -6 a | grep inet6 | awk -F '[ \t]+|/' '{print $3}' | grep -v ^::1 | grep -v ^fe80)
    cat <<EOF
Cloning of $clonefrom to $cloneto is done.

Add this IPv6 address as an AAAA record for $cloneto in Cloudflare with proxy enabled (orange cloud):
$ipv6

Then login here with the same login details as the original site: https://$cloneto/wp-login.php
EOF
}

fn_clone() {
    if [[ "$1" == *"."* ]]; then
        clonefrom="$1"
        [[ "$1" == www.* ]] && clonefrom=$(echo "$1" | cut -c 5-)
        [[ ! -d /var/www/$clonefrom ]] && printf "\nSite does not exist." && print_help_clone && exit
        shift
    else
        echo "Invalid domain: $1"
        print_help_clone
        exit
    fi

    if [[ "$1" == "to" ]]; then
        shift
    fi

    if [[ "$1" == *"."* ]]; then
        cloneto="$1"
        [[ "$1" == www.* ]] && cloneto=$(echo "$1" | cut -c 5-)
    fi

    if [[ -d /var/www/$cloneto ]]; then
        echo -n "Do you want to overwrite $cloneto from $clonefrom? [y/Y/yes]: "
        read -r consent
        if [[ "$consent" == "yes" || "$consent" == "y" || "$consent" == "Y" ]]; then
            qyc del "$cloneto" -y
            clone_site
        else
            printf "Not cloning site.\n"
            exit
        fi
    else
        clone_site
    fi
}

cnf_php_version() {
    if [[ "$1" =~ (8.[0-1]|7.4) ]]; then
        new_ver=$1
        export new_ver
    else
        echo "No correct version number for PHP, should be 7.4, 8.0 or 8.1"
        exit
    fi
    sed "s/^php_version: .*/php_version: $1/" -i /var/opt/qycli/cnf.yaml
    upd_php
}

cnf_php_parser() {
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        v | ver | version)
            shift
            cnf_php_version "$@"
            ;;
        8.1 | 8.0 | 7.4)
            cnf_php_version "$@"
            ;;
        esac
        shift
    done
}

cnf_set_cloudflare_tokens() {
    sed "s/^cloudflare_token: .*/cloudflare_token: $cf_token/" -i /var/opt/qycli/cnf.yaml
    upd_get_cf_token_accounts_and_zones
    upd_get_cf_accounts_and_zones
}

fn_cnf() {
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        php)
            shift
            cnf_php_parser "$@"
            ;;
        cft | cloudflaretoken)
            shift
            cf_token=$1
            cnf_set_cloudflare_token
            ;;
        esac
        shift
    done
}

fn_del() {
    if [[ "$1" == "" ]]; then
        print_help_del
    else
        del_parser "$@"
    fi
}

fn_info_db() {
    admindbpass=$(yq .db_admin_password /var/opt/qycli/cnf.yaml)
    if [[ -z "$(ls -A /etc/nginx/sites-available)" ]]; then
        cat <<EOF

There are no sites available on your server. Make a site and run this command again.
Here the admin DB user info just in case you need it for something else.

user: admin
password: $admindbpass

EOF
    else
        firstdomain=$(find /etc/nginx/sites-available -maxdepth 1 -name "*.*" -type f -printf '%P\n')
        cat <<EOF
   
Log in as the priviledged admin user. 
You will be able to access the complete database not just the site's.

user: admin
password: $admindbpass

https://$firstdomain/qyc-pma/

EOF
    fi
}

fn_info() {
    if [[ -z $1 ]]; then
        cat /var/opt/qycli/cnf.yaml
    elif [[ $1 =~ (db|database|dbadmin) ]]; then
        fn_info_db
    else
        print_help_info
    fi
}
