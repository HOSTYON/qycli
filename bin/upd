#!/bin/bash

# qycli update functions
upd_qycli() {
    git -C /opt/qycli pull
    git -C /opt/qycli-plugin pull
    cp /opt/qycli/bin/qyc /usr/bin/qyc
    chmod 755 /usr/bin/qyc
    chmod 755 /opt/qycli/kernel
    chmod 755 /opt/qycli/sec_firewall
    snap refresh
    tee /etc/cron.d/qycli-upd <<EOF
SHELL=/bin/bash
5 9 * * * root /usr/bin/qyc upd
EOF
}

upd_apt() {
    if dir /etc/apt/sources.list.d/ | grep -q old; then
        rm /etc/apt/sources.list.d/*.old* # Remove old mariadb.list
    fi
    apt update && apt upgrade -y && apt -y dist-upgrade && apt -y autoremove
}

upd_get_snap_channel() {
    branch_name=$(grep "branch_name" /var/opt/qycli/cnf | sed s+branch_name=++)
    if [[ "$branch_name" == "dev" ]]; then
        snap_channel=edge
    elif [[ "$branch_name" == "beta" ]]; then
        snap_channel=beta
    else
        snap_channel=stable
    fi
}

upd_get_cpus() {
    grep "cpus" /var/opt/qycli/cnf | sed s+cpus=++
}

upd_get_ram_mb() {
    grep "ram_in_mb" /var/opt/qycli/cnf | sed s+ram_in_mb=++
}

upd_firewall() {
    sec_install=$(grep "sec_install" /var/opt/qycli/cnf | sed s+sec_install=++)
    if [[ "$sec_install" == "yes" ]]; then
        # shellcheck disable=SC1091
        source /opt/qycli/sec_firewall
    fi
}

upd_nginx_conf_renew_cf_ips() {
    if [[ -f /etc/nginx/conf.d/cloudflare.conf ]]; then
        rm /etc/nginx/conf.d/cloudflare.conf
    fi
    # shellcheck disable=SC2013
    for cfip in $(cat /var/opt/qycli/cloudflare_ipv6_ips); do
        echo "set_real_ip_from $cfip;" | tee -a /etc/nginx/conf.d/cloudflare.conf >/dev/null
    done
    echo 'real_ip_header CF-Connecting-IP;' | tee -a /etc/nginx/conf.d/cloudflare.conf >/dev/null
    echo 'real_ip_recursive on;' | tee -a /etc/nginx/conf.d/cloudflare.conf >/dev/null

    nginx -s reload
}

upd_nginx_conf() {
    cp -rf /snap/qycli-nginx/current/etc/nginx/* /etc/nginx/
    cp -rf /opt/qycli/cnf/nginx/* /etc/nginx/

    worker_processes=$(upd_get_cpus)                # 1 worker per CPU
    worker_connections=$(($(upd_get_cpus) * 10000)) # 10000 per CPU
    sed -i "s+.*worker_processes.*+worker_processes ${worker_processes};+" /etc/nginx/nginx.conf
    sed -i "s+.*worker_connections.*+    worker_connections ${worker_connections};+" /etc/nginx/nginx.conf

    nginx -s reload
}

upd_nginx() {
    if ! cmp -s /snap/qycli-nginx/current/usr/local/nginx/sbin/nginx /usr/sbin/nginx; then
        cp /snap/qycli-nginx/current/usr/local/nginx/sbin/nginx /usr/sbin/nginx
        cp -rf /snap/qycli-nginx/current/usr/local/nginx/modules/* /usr/local/nginx/modules/
        systemctl restart nginx
    fi

    if ! cmp -s /opt/qycli/cnf/nginx/nginx.service /lib/systemd/system/nginx.service; then
        cp /opt/qycli/cnf/nginx/nginx.service /lib/systemd/system/nginx.service
        systemctl daemon-reload
        systemctl restart nginx
        systemctl enable nginx
    fi
}

upd_mariadb_conf_ram_based() {
    local innodb_buffer_pool_size=$(($(upd_get_ram_mb) * 80 / 100)) # 80% of all memory in MB
    local innodb_log_file_size=$(($(upd_get_ram_mb) * 20 / 100))    # 20% of all memory in MB
    local tmp_table_size=$(($(upd_get_ram_mb) * 64 / 1000))         # Per GB RAM 64MB
    sed -e "s/.*innodb_buffer_pool_size.*/innodb_buffer_pool_size = ${innodb_buffer_pool_size}M/" \
        -e "s/.*innodb_log_file_size.*/innodb_log_file_size = ${innodb_log_file_size}M/" \
        -e "s/.*tmp_table_size.*/tmp_table_size = ${tmp_table_size}M/" \
        -e "s/.*max_heap_table_size.*/max_heap_table_size = ${tmp_table_size}M/" -i /etc/mysql/mariadb.conf.d/99-qyc.cnf

}

upd_mariadb_conf_cpu_based() {
    local max_connections=$(($(upd_get_cpus) * 512)) # 512 times CPU cores
    local query_cache_size=$(($(upd_get_cpus) * 64)) # 64 times CPU cores
    sed -e "s/.*max_connections.*/max_connections = ${max_connections}/" \
        -e "s/.*query_cache_size.*/query_cache_size = ${query_cache_size}M/" -i /etc/mysql/mariadb.conf.d/99-qyc.cnf
}

upd_mariadb_conf() {
    cp /opt/qycli/cnf/mysql/mariadb.conf.d/99-qyc.cnf /etc/mysql/mariadb.conf.d/99-qyc.cnf
    upd_mariadb_conf_ram_based
    upd_mariadb_conf_cpu_based
    systemctl restart mariadb
}

upd_php_conf() {
    [[ ! -d /etc/php/fpm ]] && mkdir -p /etc/php/fpm
    cp -rf /opt/qycli/cnf/php/* /etc/php/
    chown -R qycli:qycli /etc/php

    local opmem=$(($(upd_get_ram_mb) * 15 / 100)) # 15% of all memory in MB
    cp /opt/qycli/cnf/php/fpm/php.ini /etc/php/fpm/php.ini
    sed -e "s/.*opcache.memory_consumption.*/opcache.memory_consumption = ${opmem}M/" -i /etc/php/fpm/php.ini
    sed -e "s/.*opcache.jit_buffer_size.*/opcache.jit_buffer_size = ${opmem}M/" -i /etc/php/fpm/php.ini

    local maxchil=$(($(upd_get_ram_mb) * 70 / 80 / 100)) # pm.max_children = 70% Total Memory / 80MB
    cp /opt/qycli/cnf/php/fpm/pool.d/qycli.conf /etc/php/fpm/pool.d/qycli.conf
    sed -e "s/.*pm.max_children.*/pm.max_children = ${maxchil}/" -i /etc/php/fpm/pool.d/qycli.conf

    systemctl restart php-fpm
}

upd_php() {
    php_version=$(grep "php_version" /var/opt/qycli/cnf | sed 's/php_version=//') # Reading the qycli.cnf file
    php_version_short=$(echo "$php_version" | tr -d ".")

    upd_get_snap_channel
    snap install qycli-php"$php_version_short" --$snap_channel

    if ! cmp -s /snap/qycli-php"$php_version_short"/current/php/sbin/php-fpm /usr/sbin/php-fpm; then
        cp -f /snap/qycli-php"$php_version_short"/current/php/sbin/php-fpm /usr/sbin/php-fpm
        cp -rf /snap/qycli-php"$php_version_short"/current/php/bin/* /usr/bin/
        mkdir -p /php/lib/php/extensions
        cp -r /snap/qycli-php"$php_version_short"/current/php/lib/php/extensions/* /php/lib/php/extensions/
        systemctl restart php-fpm
    fi

    if ! cmp -s /opt/qycli/cnf/php/php-fpm.service /lib/systemd/system/php-fpm.service; then
        cp /opt/qycli/cnf/php/php-fpm.service /lib/systemd/system/php-fpm.service
        systemctl daemon-reload
        systemctl enable php-fpm
        systemctl restart php-fpm
    fi
}

upd_redis_conf() {
    cp /opt/qycli/cnf/redis/redis.conf /etc/redis/redis.conf
    local redismem=$(($(upd_get_ram_mb) * 20 / 100)) # 20% of all memory in MB
    sed -i "s+maxmemory[[:space:]].*+maxmemory ${redismem}mb+g" /etc/redis/redis.conf
    systemctl restart redis-server
}

upd_redis_service() {
    if ! cmp -s /opt/qycli/cnf/redis/redis-server.service /lib/systemd/system/redis-server.service; then
        cp /opt/qycli/cnf/redis/redis-server.service /lib/systemd/system/redis-server.service
        systemctl daemon-reload
        systemctl enable redis-server
        systemctl restart redis-server
    fi
}

upd_pma_conf() {
    cp /opt/qycli/cnf/redis/redis-server.service /lib/systemd/system/redis-server.service
    cp /var/www/pma/config.sample.inc.php /var/www/pma/config.inc.php
}

upd_system_resources_qycli_cnf() {
    cpus=$(grep -c processor /proc/cpuinfo)
    ram_in_mb=$(($(grep MemTotal /proc/meminfo | tr -d 'MemTotal: kB') / 1000))

    if ! grep -q "cpus" /var/opt/qycli/cnf; then
        echo "cpus=$cpus" >>/var/opt/qycli/cnf
    fi
    if [[ $cpus != $(grep "cpus" /var/opt/qycli/cnf | sed s+cpus=++) ]]; then
        sed -i "s+.*cpus.*+cpus=$cpus+" /var/opt/qycli/cnf
    fi

    if ! grep -q "ram_in_mb" /var/opt/qycli/cnf; then
        echo "ram_in_mb=$ram_in_mb" >>/var/opt/qycli/cnf
    fi
    if [[ $ram_in_mb != $(grep "ram_in_mb" /var/opt/qycli/cnf | sed s+ram_in_mb=++) ]]; then
        sed -i "s+.*ram_in_mb.*+ram_in_mb=$ram_in_mb+" /var/opt/qycli/cnf
    fi
}

upd_get_new_cf_ips() {
    curl -s https://www.cloudflare.com/ips-v4 -o /var/opt/qycli/cloudflare_ipv4_ips_new
    curl -s https://www.cloudflare.com/ips-v6 -o /var/opt/qycli/cloudflare_ipv6_ips_new
    if ! cmp -s /var/opt/qycli/cloudflare_ipv4_ips_new /var/opt/qycli/cloudflare_ipv4_ips || ! cmp -s /var/opt/qycli/cloudflare_ipv6_ips_new /var/opt/qycli/cloudflare_ipv6_ips; then
        cp /var/opt/qycli/cloudflare_ipv4_ips_new /var/opt/qycli/cloudflare_ipv4_ips
        cp /var/opt/qycli/cloudflare_ipv6_ips_new /var/opt/qycli/cloudflare_ipv6_ips
        upd_firewall
        upd_nginx_conf_renew_cf_ips
    fi
}

upd_get_cf_accounts_and_zones() {
    cf_token=$(grep "cloudflare_token" /var/opt/qycli/cnf | sed s+cloudflare_token=++)
    # Get all accounts
    curl -X GET "https://api.cloudflare.com/client/v4/accounts?page=1&per_page=1000" \
        -H "Authorization: Bearer $cf_token" \
        -H "Content-Type: application/json" >/var/opt/qycli/cfaccounts.json

    # Get all zones of all accounts
    for id in $(jq -r '.result[].id' </var/opt/qycli/cfaccounts.json); do
        curl -X GET "https://api.cloudflare.com/client/v4/zones?status=active&account.id=$id&page=1&per_page=500" \
            -H "Authorization: Bearer $cf_token" \
            -H "Content-Type: application/json" >>/var/opt/qycli/cfzones.json
    done
}

upd_dns_entry() {
    cf_token=$(grep "cloudflare_token" /var/opt/qycli/cnf | sed s+cloudflare_token=++)
    # Check if dns file exists
    if [[ -f ${domain}_cf_dns.json ]]; then
        dns_update_id=$(jq -r .result.id <"$domain"_cf_dns.json)
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/$root_domain_zone_id/dns_records/$dns_update_id" \
            -H "Authorization: Bearer $cf_token" \
            -H "Content-Type: application/json" \
            --data '{"type":"'"$dns_type"'","name":"'"$domain"'","content":"'"$dns_value"'","ttl":1,"proxied":true}' >"$domain"_cf_dns.json
    fi
}

upd_composer() {
    EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
        echo >&2 'ERROR: Invalid installer checksum'
        rm composer-setup.php
        exit 1
    fi

    php composer-setup.php --quiet --filename=composer-binary --install-dir=/usr/local/bin/
    RESULT=$?
    rm composer-setup.php
    echo $RESULT

    tee /usr/local/bin/composer >/dev/null <<'EOF'
runuser -u qycli -- composer-binary $@
EOF
    chmod +x /usr/local/bin/composer
}

upd_phpmyadmin() {
    composer -d/var/www/pma update
}

upd_tinyfilemanager() {
    git -C /var/www/tinyfilemanager pull
}

upd_fn() {
    upd_qycli
    upd_apt
    upd_system_resources_qycli_cnf
    upd_get_new_cf_ips
    upd_mariadb_conf
    upd_nginx_conf
    upd_nginx
    upd_php_conf
    upd_php
    upd_redis_conf
    upd_redis_service
    upd_composer
    upd_phpmyadmin
    upd_tinyfilemanager
}
